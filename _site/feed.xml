<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-01-20T09:37:56+08:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">Building an accessible theme toggle</title><link href="http://localhost:4000/2025/01/16/theme-toggle.html" rel="alternate" type="text/html" title="Building an accessible theme toggle" /><published>2025-01-16T00:00:00+08:00</published><updated>2025-01-16T00:00:00+08:00</updated><id>http://localhost:4000/2025/01/16/theme-toggle</id><content type="html" xml:base="http://localhost:4000/2025/01/16/theme-toggle.html"><![CDATA[<p>To offer an inclusive user experience, most websites have both light and dark modes. Some of the key considerations for implementing a theme toggle include the following:</p>

<ol>
  <li>The default theme should initially reflect the user’s system preferences</li>
  <li>The theme toggler’s purpose should be intuitive and minimal</li>
  <li>It should be keyboard and screen-reader accessible</li>
</ol>

<p><br /></p>

<h4 id="visual-design">Visual design</h4>

<p>There are many different theme toggle designs online. Here are some examples:</p>

<div width="100%" style="display: flex; justify-content: center">
<figure style="display: flex; flex-direction: column; width: 150px">
  <img src="http://localhost:4000/assets/images/theme-toggle/mantine.gif" alt="Mantine's theme toggle" />
  <figcaption style="text-align: center"><a href="https://mantine.dev/">Mantine</a></figcaption>
</figure>
<figure style="display: flex; flex-direction: column; width: 150px">
    <img src="http://localhost:4000/assets/images/theme-toggle/tailwind.gif" alt="Tailwind's theme toggle" />
  <figcaption style="text-align: center"><a href="https://mantine.dev/">Tailwind</a></figcaption>
</figure>
<figure style="display: flex; flex-direction: column; width: 150px">
  <img src="http://localhost:4000/assets/images/theme-toggle/tabler.gif" alt="Tabler's theme toggle" />

  <figcaption style="text-align: center"><a href="https://tabler.io/">Tabler</a></figcaption>
</figure>
<figure style="display: flex; flex-direction: column; width: 100px">
<img src="http://localhost:4000/assets/images/theme-toggle/portfolio.gif" alt="Emma Moore's portfolio theme toggle theme toggle" />
  <figcaption style="text-align: center"><a href="https://emoore29.github.io/">Emma Moore Portfolio</a></figcaption>
</figure>
</div>

<p>I chose the latter design for the current version of my website because I felt that a switch was the best visual representation of the actual function of the button. The first two designs, which display a button with a sun icon when the page is in dark mode, might look confusing to some users.</p>

<p>There are some downsides to the latter design. It’s slightly more cluttered than the first two designs, doesn’t allow the user to select a ‘system mode’, and creates some additional accessibility concerns to address.</p>

<p>Ultimately, the design choice will come down to what is most suitable for the website in question.</p>

<h4 id="implementation">Implementation</h4>

<h5 id="building-the-logic-javascript-and-html-data-themes">Building the logic: JavaScript and HTML Data Themes</h5>

<p>In implementing the theme toggler logic on my own website, I initially took inspiration from <a href="https://derekkedziora.com/blog/dark-mode-revisited">Derek Kedziora’s guide</a>. My code builds upon the code found in that guide; however, with several adjustments made in an attempt to simplify the logic and reduce repetition.</p>

<p>Using the data-* HTML attribute on the <code class="language-plaintext highlighter-rouge">&lt;html&gt;</code> element allows for defining CSS variables that change depending on the value of the attribute. For example:</p>

<script src="https://gist.github.com/emoore29/fc360375cf5e48414fbc615f576bbbf2.js"></script>

<p>Then, you can simply attach an event listener to a toggle button that toggles the data-theme between “light” and “dark”, which will update the CSS variables and therefore the color scheme of the website.</p>

<p>There are a couple of options to ensure that on a user’s first visit, the color scheme matches their system preferences.</p>

<p><a href="https://derekkedziora.com/blog/dark-mode-revisited">Derek Kedziora’s guide</a> uses the <code class="language-plaintext highlighter-rouge">prefers-color-scheme</code> CSS media feature to detect the user’s system preferences. This will work; however, a downside is that it introduces some repetitive CSS where the variables need to be defined both inside and outside the media query.</p>

<p>For example, if you only define the dark mode colors inside the media query and light mode outside the query, as shown below, the dark mode CSS variables will not be accessible to users who do not have a dark mode system preference:</p>

<script src="https://gist.github.com/emoore29/b118e94b5d9b2e1522320dddea255ce8.js"></script>

<p>^^This will not work.</p>

<p>An alternative is to detect the user’s preferred color scheme using JavaScript before the page fully loads, so that the correct color scheme is applied before the default CSS is loaded.</p>

<p>To do this, create a <code class="language-plaintext highlighter-rouge">checkTheme.js</code> file that will be linked in the <code class="language-plaintext highlighter-rouge">&lt;head&gt;</code> of your HTML document.</p>

<p>To start with, detect and set the user’s preference with the following code:</p>

<script src="https://gist.github.com/emoore29/48ea02553b5c6bdb7e492b9e3344b803.js"></script>

<p>Then, set up your CSS variables:</p>

<script src="https://gist.github.com/emoore29/3a2a186f9edb41cf6f98f1b2425c7d37.js"></script>

<p>Now, if the user’s system preferences are for dark mode, the dark mode CSS variables will be applied, and vice versa.</p>

<p>Another feature of dark/light mode toggle is to remember the user’s chosen theme. Say their system preference is light mode, but they toggle to dark mode and then leave the website. The goal is to ensure the website is still in dark mode when they return. For this, you can use localStorage to store their preference, and then check if anything is stored before defaulting to their system preference.</p>

<p>To do this, update the <code class="language-plaintext highlighter-rouge">checkTheme.js</code> file to read as follows:</p>

<script src="https://gist.github.com/emoore29/f669bdc6f2fc6d616c5a4a5ff207e491.js"></script>

<p>Now, before the page fully loads, the JavaScript runs and detects if the user’s preference has been stored, and if not, defaults to their system preference.</p>

<p>Next, to add the toggle logic, create a file named <code class="language-plaintext highlighter-rouge">themeToggle.js</code> and add it to the HTML document, this time at the bottom of the document just after the body. The order is important, because it needs to be added after the body. If it loads before the body, it won’t be able to find the toggle element to add a click event listener.</p>

<p>The JavaScript in your <code class="language-plaintext highlighter-rouge">themeToggle.js</code> will have to be customised to your specific design, but the fundamental logic should be the same:</p>

<ol>
  <li>Get your toggle button/element by id or className</li>
  <li>Attach a click event listener to the toggle element that sets the data-theme to the opposite of the current theme, and updates the current theme in local storage</li>
</ol>

<p>Depending on the HTML structure and styling on your toggle, you might also need to add additional logic. For example, the switch on my portfolio has a “sliding” pseudo-element, so that also required adding a “dark” class when dark mode was active to transform the pseudo-element with CSS.</p>

<p>You can view the code for this portfolio <a href="https://github.com/emoore29/emoore29.github.io/tree/main/assets/js">here</a>, but to keep things simple, here’s some pseudo-code for what a simple toggle button might need:</p>

<script src="https://gist.github.com/emoore29/409f0c93db5e216be0e9990ce49db8dc.js"></script>

<p>You could also use session storage rather than local storage, if you think users are more likely to want the theme to match their system preferences than the last theme they selected on the site, which is shown in the aforementioned guide.</p>

<h5 id="building-the-design-html-and-css">Building the design: HTML and CSS</h5>

<p>As mentioned, the logic described above can be adapted to any design. For the switch design, I took inspiration from this <a href="https://www.letsbuildui.dev/articles/building-a-dark-mode-theme-toggle/">LetsBuildUI article</a>, again, with several adjustments to improve the accessibility of the switch.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[To offer an inclusive user experience, most websites have both light and dark modes. Some of the key considerations for implementing a theme toggle include the following:]]></summary></entry><entry><title type="html">Computer Principles Part 1: Logic Gates</title><link href="http://localhost:4000/notes/2024/10/17/logic-gates.html" rel="alternate" type="text/html" title="Computer Principles Part 1: Logic Gates" /><published>2024-10-17T00:00:00+08:00</published><updated>2024-10-17T00:00:00+08:00</updated><id>http://localhost:4000/notes/2024/10/17/logic-gates</id><content type="html" xml:base="http://localhost:4000/notes/2024/10/17/logic-gates.html"><![CDATA[<p>These are my summary notes based on reading the book <a href="https://www.goodreads.com/book/show/18276352-but-how-do-it-know-the-basic-principles-of-computers-for-everyone?ac=1&amp;from_search=true&amp;qid=OXoglbzooG&amp;rank=1"><em>But How Do It Know?</em> by J. Clark Scott</a>. If I’ve used any other resources, I’ll link them where appropriate. Part 1 is an introduction to logic gates.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">. . .</td>
    </tr>
  </tbody>
</table>

<h4 id="logic-gates">Logic Gates</h4>

<p>Logic gates are small electrical circuits wired in such a way as to process binary inputs into a binary output. To do this, they use transistors, which are basically electronic switches that can be turned on or off.</p>

<p>I’ll only show a couple of the electrical circuits, since it’s not necessary to understand the electronics to understand how the gates are used to build a computer. I think the AND gate is one of the easiest to understand.</p>

<h4 id="and-gate">AND gate</h4>

<p>AND gate electrical circuit:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="http://localhost:4000/assets/images/logic-gates/and-circuit.png" alt="AND gate electrical circuit" /></td>
    </tr>
    <tr>
      <td style="text-align: center"><em><a href="http://hyperphysics.phy-astr.gsu.edu/hbase/Electronic/trangate.html#c3">Hyperphysics</a></em></td>
    </tr>
  </tbody>
</table>

<p>The above can be simplified into the following diagram:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="http://localhost:4000/assets/images/logic-gates/and-gate.png" alt="AND gate" /></td>
    </tr>
    <tr>
      <td style="text-align: center"><a href="https://www.amazon.com.au/But-How-Know-Principles-Computers-ebook/dp/B00F25LEVC">But How Do It Know?</a></td>
    </tr>
  </tbody>
</table>

<p>For C to be on, A and B must both be on. Any other combinations will result in C being off:</p>

<table>
  <thead>
    <tr>
      <th>A</th>
      <th>B</th>
      <th>C</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <td>0</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <td>1</td>
      <td>1</td>
      <td>1</td>
    </tr>
  </tbody>
</table>

<h4 id="nand-gate">NAND gate</h4>

<p>A NAND gate is so named because it is a negative AND gate. So the C output will be the opposite of an AND gate. Inputs A and B must both be on for the output, C, to be off.</p>

<p>Electrical circuit:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="http://localhost:4000/assets/images/logic-gates/nand-electrical-circuit.png" alt="NAND gate electrical circuit" /></td>
    </tr>
    <tr>
      <td style="text-align: center"><a href="http://hyperphysics.phy-astr.gsu.edu/hbase/Electronic/trangate.html#c3">Hyperphysics</a></td>
    </tr>
  </tbody>
</table>

<p>Simplified diagram:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="http://localhost:4000/assets/images/logic-gates/nand-gate.png" alt="NAND gate" /></td>
    </tr>
    <tr>
      <td style="text-align: center"><a href="https://www.amazon.com.au/But-How-Know-Principles-Computers-ebook/dp/B00F25LEVC">But How Do It Know?</a></td>
    </tr>
  </tbody>
</table>

<p>Possible combinations:</p>

<table>
  <thead>
    <tr>
      <th>A</th>
      <th>B</th>
      <th>C</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <td>0</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <td>1</td>
      <td>1</td>
      <td>0</td>
    </tr>
  </tbody>
</table>

<p>Gates can be combined to create other types of gates:</p>

<p>An AND gate can be created by combining a NAND gate with a NOT gate:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="http://localhost:4000/assets/images/logic-gates/and-combination.png" alt="Combination to create AND" /></td>
    </tr>
    <tr>
      <td style="text-align: center"><a href="https://www.amazon.com.au/But-How-Know-Principles-Computers-ebook/dp/B00F25LEVC">But How Do It Know?</a></td>
    </tr>
  </tbody>
</table>

<p>An OR gate can be made by combining two NOT gates with a NAND gate:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="http://localhost:4000/assets/images/logic-gates/or-combination.png" alt="Combination to create OR" /></td>
    </tr>
    <tr>
      <td style="text-align: center"><a href="https://www.amazon.com.au/But-How-Know-Principles-Computers-ebook/dp/B00F25LEVC">But How Do It Know?</a></td>
    </tr>
  </tbody>
</table>

<p>A XOR gate can be made by combining two NOT gates with three NAND gates.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="http://localhost:4000/assets/images/logic-gates/xor-combination.png" alt="Combination to create XOR" /></td>
    </tr>
    <tr>
      <td style="text-align: center"><a href="https://www.amazon.com.au/But-How-Know-Principles-Computers-ebook/dp/B00F25LEVC">But How Do It Know?</a></td>
    </tr>
  </tbody>
</table>

<p>Let’s look at one combination for the XOR gate (the second row in the table below):</p>

<ul>
  <li>When A is off, C will be on (NOT gate)</li>
  <li>When B is on, D will be off (NOT gate)</li>
  <li>When A is off and D is off, F will be on (NAND gate)</li>
  <li>When B is on and C is on, E will be off (NAND gate)</li>
  <li>When E is off and F is on, G will be on (NAND gate)</li>
</ul>

<table>
  <thead>
    <tr>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      <th>E</th>
      <th>F</th>
      <th>G</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <td><strong>0</strong></td>
      <td><strong>1</strong></td>
      <td><strong>1</strong></td>
      <td><strong>0</strong></td>
      <td><strong>0</strong></td>
      <td><strong>1</strong></td>
      <td><strong>1</strong></td>
    </tr>
    <tr>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
    </tr>
  </tbody>
</table>

<p>You can start to see how logic gates can be combined in various ways to start building out a computer. However, these gates can also be made directly with transistors, which is much more efficient for building modern computers. Here’s a transistor OR gate, which is a bit simpler than combining two NOT gates and a NAND gate:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="http://localhost:4000/assets/images/logic-gates/or-circuit.png" alt="OR gate electrical circuit" /></td>
    </tr>
    <tr>
      <td style="text-align: center"><a href="http://hyperphysics.phy-astr.gsu.edu/hbase/Electronic/trangate.html#c3">Hyperphysics</a></td>
    </tr>
  </tbody>
</table>

<h4 id="summary">Summary</h4>

<p>Here are the simplified diagrams of the main gates discussed in <em>But How Do It Know?</em>:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">AND</th>
      <th style="text-align: center">NOT</th>
      <th style="text-align: center">NAND</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="http://localhost:4000/assets/images/logic-gates/and-gate.png" alt="AND gate" /></td>
      <td style="text-align: center"><img src="http://localhost:4000/assets/images/logic-gates/not-gate.png" alt="NOT gate" /></td>
      <td style="text-align: center"><img src="http://localhost:4000/assets/images/logic-gates/nand-gate.png" alt="NAND gate" /></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: center">OR</th>
      <th style="text-align: center">XOR</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="http://localhost:4000/assets/images/logic-gates/or-gate.png" alt="OR gate" /></td>
      <td style="text-align: center"><img src="http://localhost:4000/assets/images/logic-gates/xor-gate.png" alt="NOT gate" /></td>
    </tr>
  </tbody>
</table>

<p>To start building the parts that make up a computer, these gates can be connected in various ways to create more complicated logic.</p>

<p>In part 2, I’ll go through an example from <em>But How Do It Know?</em> that shows how NAND gates can be combined to make computer memory.</p>]]></content><author><name></name></author><category term="notes" /><summary type="html"><![CDATA[These are my summary notes based on reading the book But How Do It Know? by J. Clark Scott. If I’ve used any other resources, I’ll link them where appropriate. Part 1 is an introduction to logic gates.]]></summary></entry><entry><title type="html">Building an Art Portfolio Website with Next.js and Sanity</title><link href="http://localhost:4000/notes/2024/10/10/building-an-art-portfolio.html" rel="alternate" type="text/html" title="Building an Art Portfolio Website with Next.js and Sanity" /><published>2024-10-10T00:00:00+08:00</published><updated>2024-10-10T00:00:00+08:00</updated><id>http://localhost:4000/notes/2024/10/10/building-an-art-portfolio</id><content type="html" xml:base="http://localhost:4000/notes/2024/10/10/building-an-art-portfolio.html"><![CDATA[<p>In late 2023/early 2024 I built a <a href="https://www.donnapriceart.com/">portfolio website</a> for an artist. They didn’t want to be locked into paying subscription fees for CMSs such as Wordpress or Wix, and had a custom design in mind. They also wanted to be able to update the website themselves and not have to go through me every time they wanted to add or remove a photo of their work.</p>

<p>I decided to use Sanity as the backend platform on which my client could update the website content, and Next.js as the framework I used to build the frontend, since I was already familiar with it. Sanity handles the authentication.</p>

<p>These are the primary guides I used to get started with the project:</p>

<ul>
  <li><a href="https://www.freecodecamp.org/news/how-to-build-a-portfolio-site-with-sanity-and-nextjs/#heading-what-is-sanity">How to Build a Portfolio Site with Sanity and Next.js</a></li>
  <li><a href="https://www.sanity.io/guides/sanity-webhooks-and-on-demand-revalidation-in-nextjs">Sanity Webhooks and On-demand Revalidation in Nextjs</a></li>
</ul>

<p>I’ve created this flowchart to provide an overview of how the website works:</p>

<p><img src="http://localhost:4000/assets/images/dpa/dpa-flowchart.png" alt="Flowchart overview of website architecture." /></p>

<p><br /></p>

<h4 id="configuring-sanity">Configuring Sanity</h4>

<p>I used the <code class="language-plaintext highlighter-rouge">next-sanity</code> toolkit to mount Sanity Studio to the Next.js application, such that it would be hosted with the Next.js app. I configured the base path as <code class="language-plaintext highlighter-rouge">/studio</code> in <code class="language-plaintext highlighter-rouge">sanity.config.ts</code>, and using Next.js’s App routing, implemented <a href="https://nextjs.org/docs/pages/building-your-application/routing/dynamic-routes#optional-catch-all-segments">optional catch-all dynamic routes</a> for accessing the various studio pages at <code class="language-plaintext highlighter-rouge">app/(studio)/studio/[[...index]]/page.tsx</code>. This means that the studio will be accessible at https://www.donnapriceart.com/studio/(+ any additional url segments). Those additional segments are created as follows.</p>

<p>The structure of each section that my client can update are defined in the <code class="language-plaintext highlighter-rouge">/schemas</code> directory:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">about.ts</code> - defines the structure of the about page, including a page title, slug, image, and description field</li>
  <li><code class="language-plaintext highlighter-rouge">art.ts</code> - defines the structure of an art document, including a title, slug, main image, category, and description</li>
  <li><code class="language-plaintext highlighter-rouge">category.ts</code> - defines the categories of art, with a title, slug, description, and order field</li>
  <li><code class="language-plaintext highlighter-rouge">blockContent.ts</code> - defines rich text fields that can be used in other fields, for example, descriptions</li>
  <li><strong><code class="language-plaintext highlighter-rouge">index.ts</code></strong> - schemaTypes is defined for import into <code class="language-plaintext highlighter-rouge">sanity.config.ts</code> (including all of the above schemas), which makes them available to the studio route.</li>
</ul>

<p>I also have a <code class="language-plaintext highlighter-rouge">deskStructure.js</code> file in which art is grouped based on its category so that my client can easily view their art in the studio based on category: this is added to <code class="language-plaintext highlighter-rouge">sanity.config.ts</code> via the <code class="language-plaintext highlighter-rouge">desk-tool</code> plugin.</p>

<p>Therefore, the following url segments are accessible at https://www.donnapriceart.com/studio/structure, where my client can manage their website content:</p>

<ul>
  <li>/art</li>
  <li>/about</li>
  <li>/category</li>
  <li>/watercolorMixedMedia</li>
  <li>/oilPaintings</li>
  <li>/illustrations</li>
</ul>

<p><br /></p>

<h4 id="groq-graph-relational-object-queries">GROQ (Graph-Relational Object Queries)</h4>

<p>The queries used to retrieve documents from Sanity are defined in the <code class="language-plaintext highlighter-rouge">sanity/sanity.query.ts</code> file. For example, for a given category, the getArtFromCategory query will request art from a category passed in as a parameter via a sanityFetch() function.</p>

<p>The art can then be passed to a Gallery component, which handles displaying the art, along with the title and description.</p>

<p>The <code class="language-plaintext highlighter-rouge">sanityFetch()</code> function also takes a tag. This tag is useful for data revalidation.</p>

<p><br /></p>

<h4 id="on-demand-data-revalidation">On-demand data revalidation</h4>

<p>I wanted my client to see their website update any time they made a change in Sanity Studio, so I used on-demand data revalidation to achieve this.</p>

<p>On-demand revalidation is the process of purging the data cache and re-fetching the latest content based on an event, as opposed to time-based revalidation, that automatically revalidates after a given amount of time has passed. I’ve used the tag-based approach for this project. See more in the <a href="https://nextjs.org/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating#revalidating-data">Next.js documentation</a>.</p>

<p>Since the data coming from Sanity has been tagged after fetching it, revalidateTag() is used to revalidate all entries associated with a given tag. In Sanity settings, I created a webhook that triggers when Sanity Studio content changes, and this triggers a POST request to be sent to an API endpoint in my Next.js app. A secret URI is shared between Vercel, where the site is hosted, and Sanity.</p>

<p>This ultimately causes the revalidateTag() function provided by Next.js to run, and any data on the server that was previously tagged with the same tag sent in the POST request from Sanity will be revalidated.</p>

<p><br /></p>

<h4 id="routing">Routing</h4>

<p>I used the (home) and (studio) route groups to organise and separate the pages for the studio and the main website. This allowed me to add a root layout for the main website, as well as a root layout for the studio. This was useful because the main website needed a header and additional styling that I didn’t want in the studio.</p>

<p>The about page and contact page are defined like so: <code class="language-plaintext highlighter-rouge">app/(home)/about/page.tsx</code> and <code class="language-plaintext highlighter-rouge">app/(home)/contact/page.tsx</code>.</p>

<p>For the home page, all art is retrieved and displayed in the gallery.</p>

<p>The category pages are generated with dynamic routing: <code class="language-plaintext highlighter-rouge">app/(home)/[category]/page.tsx</code>, where each category of art is retrieved using a getCategories GROQ query. The categories are also passed to the navigation component. This way, if my client decides they want to add a new category, they can, and the website will automatically update to include the new category as a route linked in the navigation.</p>

<p>The art for a given category is then retrieved as described above in the GROQ example code.</p>]]></content><author><name></name></author><category term="notes" /><summary type="html"><![CDATA[In late 2023/early 2024 I built a portfolio website for an artist. They didn’t want to be locked into paying subscription fees for CMSs such as Wordpress or Wix, and had a custom design in mind. They also wanted to be able to update the website themselves and not have to go through me every time they wanted to add or remove a photo of their work.]]></summary></entry><entry><title type="html">Cross-Browser Testing, Column-Count, Display, and More</title><link href="http://localhost:4000/notes/2023/11/18/column-count-testing.html" rel="alternate" type="text/html" title="Cross-Browser Testing, Column-Count, Display, and More" /><published>2023-11-18T00:00:00+08:00</published><updated>2023-11-18T00:00:00+08:00</updated><id>http://localhost:4000/notes/2023/11/18/column-count-testing</id><content type="html" xml:base="http://localhost:4000/notes/2023/11/18/column-count-testing.html"><![CDATA[<p>I recently came across unexpected behaviour of columns I had created using the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/column-count">column-count CSS property</a>.</p>

<p>The short version is that I had used the map() Javascript method to map images*, which would be arranged into two columns. I set “column-count: 2” on the parent container of the images. This is an easy way to create the masonry effect that is common on websites like Pinterest, with the downside being that someone tabbing through the images with a keyboard will have to look through them top to bottom, left to right, instead of left to right, top to bottom.</p>

<p>This looked fine on my computer, until I started testing the website on other devices. I noticed that on an iPad mini with an older version of Chrome (117.0.5938.117), the top of the second column was not aligned with the top of the first column. It had shifted down by about 10 pixels. At first I thought it must be because of the older Chrome version and I added the -webkit- prefix to my CSS, assuming that would fix the problem. But after making that adjustment and redeploying the website, the problem persisted, and on checking, I found that <a href="https://caniuse.com/?search=column-count">column-count should be supported for Chrome 117</a>. Checking the website on Safari on the same device, the same problem was there.</p>

<p>I didn’t want to have to redeploy my website every time I was testing a potential solution. So I discovered that I could run a local development server on my PC and access it from another device. I was using Gatsby, and all I had to do was specify the host to be my IP address when I ran gatsby develop; for example: “gatsby develop –host=192.168.1.2”. Then I could open the development website on the iPad I was seeing the issue on and start troubleshooting.</p>

<p>Although this was helpful for testing on the specific device I had at hand, the iPad mini, I wanted to see what other devices had the same problem. I found <a href="https://www.browserstack.com/">BrowserStack</a> and, unfortunately, due to their limited free trial, only had 1 minute to test the site on various devices and would also need to set up a way to view the development site. This was starting to feel unneccessarily complicated, so I ultimately created <a href="https://emoore29.github.io/column-count-tester/">this webpage</a> to let me quickly view the page on various devices/browsers and see if the columns looked different. I’ve explained what I found there.</p>

<p>In summary, this was a useful lesson in being precise with my CSS styles, a valuable refresher on the behaviour CSS of “display” property types, and a reminder that just because it looks right on my screen, it might not look right on another.</p>

<p>*Importantly, img elements have a display of inline-block by default. So I really shouldn’t have stumbled on this problem at all. I had been using Gatsby Images, and I had applied “display: flex” to my images because I had been having trouble getting them to display the same way an img element would. After a certain point I had forgotten I ever did that, and despite it being unnecessary, it stayed in my CSS until I came back to it to uncover this “bug”.</p>]]></content><author><name></name></author><category term="notes" /><summary type="html"><![CDATA[I recently came across unexpected behaviour of columns I had created using the column-count CSS property.]]></summary></entry><entry><title type="html">First Note</title><link href="http://localhost:4000/notes/2023/04/24/first-note.html" rel="alternate" type="text/html" title="First Note" /><published>2023-04-24T00:00:00+08:00</published><updated>2023-04-24T00:00:00+08:00</updated><id>http://localhost:4000/notes/2023/04/24/first-note</id><content type="html" xml:base="http://localhost:4000/notes/2023/04/24/first-note.html"><![CDATA[<p>Over the course of my studies and projects, I’ve come across some personal portfolios that inspired this notes section (<a href="https://heather-buchel.com/">here</a> <a href="https://brianlovin.com/writing">are</a> <a href="https://rmurphey.com/">a</a> <a href="https://octavian.work/">few</a>).</p>

<p>So I decided to include this section on my own website, mainly as a resource for my own learning and to keep track of problems I encounter and their respective solutions, and maybe with the added bonus of sharing those solutions with anyone else who might need them.</p>]]></content><author><name></name></author><category term="notes" /><summary type="html"><![CDATA[Over the course of my studies and projects, I’ve come across some personal portfolios that inspired this notes section (here are a few).]]></summary></entry></feed>